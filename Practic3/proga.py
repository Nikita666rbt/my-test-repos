import serial  # Импорт библиотеки для работы с последовательными портами
import time  # Импорт модуля для работы со временем
import serial.tools.list_ports  # Импорт инструмента для получения списка доступных COM-портов

# Список возможных скоростей передачи данных (бит/с)
speeds = ['1200', '2400', '4800', '9600', '19200', '38400', '57600', '115200']

# Получаем список всех доступных последовательных портов в системе
ports = [p.device for p in serial.tools.list_ports.comports()]

# Проверяем, найдены ли доступные порты
if not ports:
    print("Ошибка: Не найдено ни одного доступного порта!")  # Сообщаем об ошибке, если портов нет
    exit(1)  # Завершаем выполнение программы с кодом ошибки

# Выбираем первый доступный порт из списка
port_name = ports[0]

# Устанавливаем скорость соединения (берем последнее значение из списка speeds, т.е. 115200)
port_speed = int(speeds[-1])

# Устанавливаем таймаут ожидания ответа (в секундах)
port_timeout = 10

# Открываем соединение с устройством через последовательный порт
ard = serial.Serial(port_name, port_speed, timeout=port_timeout)

# Даем устройству время инициализироваться
time.sleep(1)

# Очищаем входной буфер порта перед началом чтения
ard.flushInput()

try:
    # Считываем данные из входного буфера последовательного порта
    # Используется несколько вызовов ard.read(ard.inWaiting()), что может быть неоптимально
    msg_bin = ard.read(ard.inWaiting())  
    msg_bin += ard.read(ard.inWaiting())  
    msg_bin += ard.read(ard.inWaiting())  
    msg_bin += ard.read(ard.inWaiting())  

    # Декодируем бинарные данные в строку (UTF-8 по умолчанию)
    msg_str_ = msg_bin.decode()

    # Выводим количество прочитанных байт
    print(len(msg_bin))

except Exception as e:
    # В случае ошибки выводим сообщение об ошибке
    print(f'Ошибка: {e}')
    msg_str_ = ""

finally:
    # Закрываем соединение с последовательным портом
    ard.close()
    
    # Даем время перед завершением работы
    time.sleep(1)

    # Выводим полученные данные
    print(msg_str_)
